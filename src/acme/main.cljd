(ns acme.main
  (:require
    ["package:flutter/material.dart" :as m]
    ["package:flutter/cupertino.dart" :as c]
    ["package:flutter/widgets.dart" :as w]
    ["dart:ui" :as d]
    ["package:flutter_platform_widgets/flutter_platform_widgets.dart" :as pw]
    [cljd.flutter :as f]))

(def state (atom {:theme     m.ThemeMode/dark
                  :app-title "App title"
                  :app-name  "App name"}))

(defn- ^w/Widget drawer-builder [context]
  (m/Drawer
    .child
    (w/ListView
      .padding w.EdgeInsets/zero
      .children [(m/DrawerHeader
                   .child (f/widget (pw/PlatformIconButton
                                      .icon (-> context pw/PlatformIcons .-back w/Icon)
                                      .onPressed (fn ^void []
                                                   (.pop w/Navigator context)
                                                   nil))))
                 (m/ListTile
                   .leading (f/widget
                              :let [^pw/PlatformThemeState platform-theme-state (.of pw/PlatformTheme context)]
                              (pw/PlatformSwitch
                                .value (if (= m.ThemeMode/dark (.-themeMode platform-theme-state)) true false)
                                .onChanged (fn [value?] (.-themeMode! platform-theme-state (if value? m.ThemeMode/dark m.ThemeMode/light)) nil)))
                   .title (w/Text "Dark mode?"))])))

(defn- ^pw/PlatformAppBar app-bar-builder
  [context _]
  (pw/PlatformAppBar
    .title (m/Text (:app-title @state))
    .cupertino (fn [_ __]
                 (pw/CupertinoNavigationBarData
                   .leading
                   (pw/PlatformIconButton
                     .onPressed (fn ^void []
                                  (.push w/Navigator context
                                         (pw/platformPageRoute
                                           .context context
                                           .builder drawer-builder))
                                  nil)
                     .cupertinoIcon (-> context pw/PlatformIcons .-dehaze w/Icon))))))

(defn- ^w/Widget body-builder
  [_ _]
  (f/widget
    m/Center
    (m/DataTable
      .columns [(m/DataColumn .label (w/Text "First"))
                (m/DataColumn .label (w/Text "Second"))]
      .rows [(m/DataRow
               .cells [(m/DataCell (w/Text "Cell 1"))
                       (m/DataCell (w/Text "Cell 2"))])])))

(defn- navigation-bar-items [context]
  [(w/BottomNavigationBarItem
     .label "Info"
     .icon (-> context pw/PlatformIcons .-info w/Icon))
   (w/BottomNavigationBarItem
     .label "Error"
     .icon (-> context pw/PlatformIcons .-error w/Icon))])

(def ^:private darkDefaultCupertinoTheme (c/CupertinoThemeData .brightness d.Brightness/dark))

(def ^:private cupertino-dark-theme
  (m/MaterialBasedCupertinoThemeData
    .materialTheme
    (.copyWith (.dark m/ThemeData)
               .cupertinoOverrideTheme
               (c/CupertinoThemeData
                 .brightness d.Brightness/dark
                 .barBackgroundColor (.-barBackgroundColor darkDefaultCupertinoTheme)
                 .textTheme
                 (c/CupertinoTextThemeData
                   .navActionTextStyle
                   (-> darkDefaultCupertinoTheme .-textTheme .-navActionTextStyle
                       (.copyWith .color (d/Color 0xF0F9F9F9)))

                   .navLargeTitleTextStyle
                   (-> darkDefaultCupertinoTheme .-textTheme .-navLargeTitleTextStyle
                       (.copyWith .color (d/Color 0xF0F9F9F9))))))))

(defn- home [context]
  (pw/PlatformTabScaffold
    .material (fn [context _] (pw/MaterialTabScaffoldData
                                .drawer (drawer-builder context)
                                .floatingActionButton (pw/PlatformIconButton
                                                        .icon (-> context pw/PlatformIcons .-addCircled w/Icon))))
    .tabController (pw/PlatformTabController)
    .items (navigation-bar-items context)
    .appBarBuilder app-bar-builder
    .bodyBuilder body-builder))

(defn main []
  (f/run
    (pw/PlatformProvider
      .builder
      (fn [_]
        (pw/PlatformTheme
          .themeMode (:theme @state)
          .materialLightTheme (-> m/ThemeData .light)
          .materialDarkTheme (-> m/ThemeData .dark)
          .cupertinoLightTheme (m/MaterialBasedCupertinoThemeData .materialTheme (-> m/ThemeData .light))
          .cupertinoDarkTheme cupertino-dark-theme
          .builder
          (fn [theme-context]
            (pw/PlatformApp
              .title (:app-name @state)
              .localizationsDelegates [m.DefaultMaterialLocalizations/delegate
                                       m.DefaultWidgetsLocalizations/delegate
                                       c.DefaultCupertinoLocalizations/delegate]
              .home (home theme-context))))))))

